import { useState } from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import Snowfall from '@/components/Snowfall';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';

interface Review {
  name: string;
  text: string;
  rating: number;
  avatar: string;
  date: string;
}

const allReviews: Review[] = [
  { name: '–ê–Ω–Ω–∞ –ú.', text: '–ó–∞–∫–∞–∑—ã–≤–∞–ª–∞ –Ω–∞–±–æ—Ä —ë–ª–æ—á–Ω—ã—Ö –∏–≥—Ä—É—à–µ–∫ ‚Äî –ø—Ä–∏—à–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º–∏! –û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º.', rating: 5, avatar: 'üë©', date: '15 –¥–µ–∫–∞–±—Ä—è 2024' },
  { name: '–î–º–∏—Ç—Ä–∏–π –ö.', text: '–û—Ç–ª–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω! –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –≤—Å–µ–π —Å–µ–º—å–µ. –ë—É–¥—É –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –µ—â—ë!', rating: 5, avatar: 'üë®', date: '12 –¥–µ–∫–∞–±—Ä—è 2024' },
  { name: '–ï–ª–µ–Ω–∞ –í.', text: '–®–æ–∫–æ–ª–∞–¥ –ø—Ä–æ—Å—Ç–æ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π! –ö–æ–ª–ª–µ–≥–∏ –±—ã–ª–∏ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–µ—Ä–≤–∏—Å!', rating: 5, avatar: 'üë©‚Äçüíº', date: '10 –¥–µ–∫–∞–±—Ä—è 2024' },
  { name: '–°–µ—Ä–≥–µ–π –õ.', text: '–ó–∞–∫–∞–∑–∞–ª –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –Ω–∞–±–æ—Ä –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –£–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è, –≤—Å—ë –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ!', rating: 5, avatar: 'üë®‚Äçüíº', date: '8 –¥–µ–∫–∞–±—Ä—è 2024' },
  { name: '–ú–∞—Ä–∏—è –ü.', text: '–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –¥—Ä—É–∑–µ–π! –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–Ω–æ–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é!', rating: 4, avatar: 'üë©‚Äçü¶∞', date: '5 –¥–µ–∫–∞–±—Ä—è 2024' },
  { name: '–ê–ª–µ–∫—Å–µ–π –ù.', text: '–ö—É–ø–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–≥. –í—Å–µ –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —à–æ–∫–æ–ª–∞–¥!', rating: 5, avatar: 'üßë', date: '3 –¥–µ–∫–∞–±—Ä—è 2024' },
  { name: '–û–ª—å–≥–∞ –°.', text: '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω! –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã, –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –°–ø–∞—Å–∏–±–æ!', rating: 4, avatar: 'üë©‚Äçü¶≥', date: '1 –¥–µ–∫–∞–±—Ä—è 2024' },
  { name: '–ò–≤–∞–Ω –†.', text: '–ó–∞–∫–∞–∑—ã–≤–∞–ª –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤. –í—Å—ë –ø—Ä–∏—à–ª–æ –≤ —Å—Ä–æ–∫, —É–ø–∞–∫–æ–≤–∫–∞ —Å—É–ø–µ—Ä! –ë—É–¥—É –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –µ—â—ë.', rating: 5, avatar: 'üë®‚Äçü¶±', date: '28 –Ω–æ—è–±—Ä—è 2024' },
  { name: '–ù–∞—Ç–∞–ª—å—è –ë.', text: '–û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–µ—Ä–≤–∏—Å! –ë—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫—Ä–∞—Å–∏–≤–æ. –ü–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—É—á–∏–ª–∏—Å—å –æ—Ç–ª–∏—á–Ω—ã–µ!', rating: 4, avatar: 'üë©‚Äçü¶±', date: '25 –Ω–æ—è–±—Ä—è 2024' },
  { name: '–ü–∞–≤–µ–ª –¢.', text: '–•–æ—Ä–æ—à–∏–π –º–∞–≥–∞–∑–∏–Ω, –Ω–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–¥–µ—Ä–∂–∞–ª–∞—Å—å –Ω–∞ –ø–∞—Ä—É –¥–Ω–µ–π. –í –æ—Å—Ç–∞–ª—å–Ω–æ–º –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ.', rating: 3, avatar: 'üë®‚Äçü¶≤', date: '20 –Ω–æ—è–±—Ä—è 2024' },
];

export default function AllReviews() {
  const [selectedRating, setSelectedRating] = useState<number | null>(null);
  const [sortOrder, setSortOrder] = useState<'newest' | 'oldest'>('newest');

  const parseDate = (dateStr: string) => {
    const months: { [key: string]: number } = {
      '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3, '–º–∞—è': 4, '–∏—é–Ω—è': 5,
      '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7, '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
    };
    const parts = dateStr.split(' ');
    const day = parseInt(parts[0]);
    const month = months[parts[1]];
    const year = parseInt(parts[2]);
    return new Date(year, month, day);
  };

  const filteredReviews = selectedRating 
    ? allReviews.filter(review => review.rating === selectedRating)
    : allReviews;

  const sortedReviews = [...filteredReviews].sort((a, b) => {
    const dateA = parseDate(a.date).getTime();
    const dateB = parseDate(b.date).getTime();
    return sortOrder === 'newest' ? dateB - dateA : dateA - dateB;
  });

  const averageRating = allReviews.reduce((sum, review) => sum + review.rating, 0) / allReviews.length;
  const ratingPercentage = (averageRating / 5) * 100;

  const ratingDistribution = [5, 4, 3, 2, 1].map(rating => {
    const count = allReviews.filter(r => r.rating === rating).length;
    const percentage = (count / allReviews.length) * 100;
    return { rating, count, percentage };
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 via-red-50 to-red-100 relative overflow-hidden">
      <Snowfall />
      <Header />
      <div className="container mx-auto px-4 pt-32 pb-20">
        <div className="text-center mb-12">
          <h1 className="text-5xl font-black mb-4 flex items-center justify-center gap-3">
            <Icon name="MessageCircle" size={48} className="text-primary" />
            <span className="text-red-600">–í—Å–µ –æ—Ç–∑—ã–≤—ã</span>
            <Icon name="MessageCircle" size={48} className="text-primary" />
          </h1>
          <p className="text-xl text-muted-foreground mb-6">‚≠ê –ë–æ–ª–µ–µ 10,000 –¥–æ–≤–æ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ‚≠ê</p>
          
          <Card className="max-w-3xl mx-auto mb-8 border-2 border-primary/20 bg-white shadow-xl">
            <CardContent className="p-6">
              <div className="flex items-center justify-center gap-8 mb-6">
                <div className="text-center">
                  <div className="text-6xl font-black text-primary mb-2">{averageRating.toFixed(1)}</div>
                  <div className="flex items-center gap-1 justify-center mb-2">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <Icon key={i} name="Star" size={24} className={i < Math.round(averageRating) ? 'text-secondary fill-secondary' : 'text-gray-300'} />
                    ))}
                  </div>
                  <p className="text-sm text-muted-foreground">–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {ratingPercentage.toFixed(0)}%</p>
                </div>
                <div className="flex-1 max-w-md">
                  {ratingDistribution.map(({ rating, count, percentage }) => (
                    <div key={rating} className="flex items-center gap-3 mb-2">
                      <span className="text-sm font-semibold w-12">{rating} <Icon name="Star" size={12} className="inline text-secondary fill-secondary" /></span>
                      <div className="flex-1 bg-gray-200 rounded-full h-3 overflow-hidden">
                        <div 
                          className="bg-secondary h-full rounded-full transition-all" 
                          style={{ width: `${percentage}%` }}
                        />
                      </div>
                      <span className="text-sm text-muted-foreground w-16">{percentage.toFixed(0)}% ({count})</span>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          <a href="/reviews">
            <Button size="lg" className="text-lg px-8 py-6">
              <Icon name="Plus" size={20} className="mr-2" />
              –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤
            </Button>
          </a>
        </div>

        <div className="flex justify-center gap-3 mb-4 flex-wrap">
          <Button
            variant={selectedRating === null ? 'default' : 'outline'}
            onClick={() => setSelectedRating(null)}
            className="text-base"
          >
            –í—Å–µ ({allReviews.length})
          </Button>
          {[5, 4, 3, 2, 1].map(rating => (
            <Button
              key={rating}
              variant={selectedRating === rating ? 'default' : 'outline'}
              onClick={() => setSelectedRating(rating)}
              className="text-base flex items-center gap-1"
            >
              {rating} <Icon name="Star" size={16} className="text-secondary fill-secondary" />
              ({allReviews.filter(r => r.rating === rating).length})
            </Button>
          ))}
        </div>

        <div className="flex justify-center gap-3 mb-6">
          <Button
            variant={sortOrder === 'newest' ? 'default' : 'outline'}
            onClick={() => setSortOrder('newest')}
            className="text-base"
          >
            <Icon name="ArrowDown" size={16} className="mr-1" />
            –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
          </Button>
          <Button
            variant={sortOrder === 'oldest' ? 'default' : 'outline'}
            onClick={() => setSortOrder('oldest')}
            className="text-base"
          >
            <Icon name="ArrowUp" size={16} className="mr-1" />
            –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ
          </Button>
        </div>

        <div className="text-center mb-6">
          <p className="text-lg font-semibold text-muted-foreground">
            –ü–æ–∫–∞–∑–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: <span className="text-primary text-xl">{sortedReviews.length}</span> –∏–∑ {allReviews.length}
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedReviews.map((review, index) => (
            <Card key={index} className="hover:shadow-2xl transition-all hover:-translate-y-2 border-2 border-secondary/20 bg-white">
              <CardContent className="p-6">
                <div className="flex items-center gap-1 mb-4">
                  {Array.from({ length: review.rating }).map((_, i) => (
                    <Icon key={i} name="Star" size={20} className="text-secondary fill-secondary" />
                  ))}
                </div>
                <p className="text-foreground mb-4 font-medium italic">"{review.text}"</p>
                <div className="flex items-center gap-3 mt-4 pt-4 border-t">
                  <div className="text-4xl">{review.avatar}</div>
                  <div className="flex-1">
                    <p className="font-black text-lg">{review.name}</p>
                    <p className="text-sm text-muted-foreground">–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å</p>
                    <p className="text-xs text-muted-foreground mt-1">{review.date}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
      <Footer />
    </div>
  );
}